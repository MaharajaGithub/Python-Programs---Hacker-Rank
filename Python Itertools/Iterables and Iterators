# Iterables :
# The itertools module standardizes a core set of fast, memory efficient tools that are useful by themselves or in combination. 
# Together, they form an iterator algebra making it possible to construct specialized tools succinctly and efficiently in pure Python.
# To read more about the functions in this module, check out their documentation here.

# TASK :
# You are given a list of N lowercase English letters. For a given integer K, 
# you can select any K indices (assume 1-based indexing) with a uniform probability from the list.
# Find the probability that at least one of the K indices selected will contain the letter: 'a'.

# Input Format
# The input consists of three lines. The first line contains the integer N, denoting the length of the list.      
# The next line consists of N space-separated lowercase English letters, denoting the elements of the list.
# The third and the last line of input contains the integer K, denoting the number of indices to be selected.

# Output Format
# Output a single line consisting of the probability that at least one of the K indices selected contains the letter:'a'.

# SOLN 1:

from itertools import combinations
N=int(input())
n=input().split()
K=int(input())
x=combinations(''.join(n),K)
count_total,count_a=0,0
for i in x:
    count_total+=1
    if 'a' in i:
        count_a+=1
print(round(count_a/count_total,3))


# SOLN 2 :

from itertools import combinations

N = int(input())
L = input().split()
K = int(input())

C = list(combinations(L, K))
F = filter(lambda c: 'a' in c, C)
print("{0:.3}".format(len(list(F))/len(C)))
