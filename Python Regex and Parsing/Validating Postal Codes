# A valid postal code P have to fullfil both below requirements:
# P must be a number in the range from 10000 to 999999 inclusive.
# P must not contain more than one alternating repetitive digit pair.

# Alternating repetitive digits are digits which repeat immediately after the next digit. 
# In other words, an alternating repetitive digit pair is formed by two equal digits that have just a single digit between them.

# TASK:

# Your task is to provide two regular expressions regex_integer_in_range and regex_alternating_repetitive_digit_pair. Where:
# regex_integer_in_range should match only integers range from 10000 to 999999 inclusive
# regex_alternating_repetitive_digit_pair should find alternating repetitive digits pairs in a given string.
# Both these regular expressions will be used by the provided code template to check if the input string P is a valid postal code

# Input Format
# Locked stub code in the editor reads a single string denoting P from stdin and uses provided expression and your regular expressions to validate if P is a valid postal code.

# Output Format
# You are not responsible for printing anything to stdout. Locked stub code in the editor does that.

# SOLN 1 :

import re
s=input()
print (bool(re.match(r'^[1-9][\d]{5}$',s) and len(re.findall(r'(\d)(?=\d\1)',s))<2 ))

import re
print(bool(re.match(
    r'^'
    r'(?!.*(.).\1.*(.).\2)'
    r'(?!.*(.)(.)\3\4)'
    r'[1-9]\d{5}'
    r'$', input()
)))


# SOLN 2 :

regex_integer_in_range = r"^[1-9][\d]{5}$"	# Do not delete 'r'.
regex_alternating_repetitive_digit_pair = r"(\d)(?=\d\1)"	# Do not delete 'r'.


import re
P = input()

print (bool(re.match(regex_integer_in_range, P)) 
and len(re.findall(regex_alternating_repetitive_digit_pair, P)) < 2)
