# group()
# A group() expression returns one or more subgroups of the match.

# groups()
# A groups() expression returns a tuple containing all the subgroups of the match.

# groupdict()
# A groupdict() expression returns a dictionary containing all the named subgroups of the match, keyed by the subgroup name.

# TASK:
# You are given a string S.
# Your task is to find the first occurrence of an alphanumeric character in S (read from left to right) that has consecutive repetitions.

# Input Format
# A single line of input containing the string S.

# Output Format
# Print the first occurrence of the repeating character. If there are no repeating characters, print -1.

# SOLN 1:

import re
m = re.search(r'([a-zA-Z0-9])\1+', input().strip())
print(m.group(1) if m else -1)

# SOLN 2 :

import re
S=input()
m=re.search(r'((\w(?!_))\2{1,})',S)
print(S[m.start()] if m else '-1')
